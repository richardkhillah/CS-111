NAME: Richard Khillah
EMAIL: RKhillah@ucla.edu
ID: 604853262

This project uses basic POSIX file operations (like open(2), creat(2), etc...),
processes command line arguments, catchs (and handles) run-time exceptions,
returns informative exit statuses.

included files:
  lab0.c:
    Source file to build executable lab0 that copies STDIN to STDOUT. lab0, once
    built (using `make`, see Makefile), performs user specified I/O redirection,
    catches (and can cause) segmentation faults. It supports 4 commandline
    options:
    --input=filname	use the specified file as standard input (making it the
    			new fd0). If lab0 is unable to open the specified input
			file, the failure is reported to stderr and lab0
			exit(2)s with a return code of 2.

    --output=filename	create the specified file as standard output (making it the
    			new fd1). If the specified file is unable to be created,
			the failure is reported to stderr and lab0 exit(2)s with 
			a return code of 3.

    --segfault		force a segmentation fault. If this argument is specified,
    			any file redirection specified (using '--input' '--output'
			options) are performed immediately followed by a segfault.
			
    --catch		registers a SIGSEGV handler that catches a segmentation
    			segmentation fault. If '--catch' is used without 
			'--segfault', manual temination of the program is necessary
			as lab0.c does not incorpate trap(1).

  Makefile:
    Build the program 'lab0' and the distribution tarball. Makefil supports 
    the following `make` commands:
    all	      build the executable 'lab0'. To build 

    check     runs a quick smoke-test on whether or not the program seems to work,
    	      supports the required arguments, and reports success or failure.
	      check generates two input files used throughout the smoke testing:
	      goodinput.txt - a file readable to all.
	      badinput.txt - a file readable to none.
	      Several check_*.txt files are created via commandline redirection and
	      used to check anticipated outputs and several output_*.txt files are
	      created via the '--output' argument, used to check anticipated
	      outputs given a controlled input. A few commanline options,
	      both indivual and combinatorially, are tested "indirectly", namely:
	      --output, --catch, --segfault --input, --segfault --output. The idea
	      here is to avoid using system wait commands to cause Makefile
	      generated program terminations.
	      The smoke-tests run are:
	      
      check_i:     Ensures that lab0 writes the contents of a readable input
      		   file to STDOUT and terminates upon attemptint to access a
		   restricted input file.

      check_o:	   Ensures that lab0 cannot write to a file with out write
      		   permissions.

      check_io:	   Ensures that lab0 writes the contents of a readable input
      		   file to file specified by --output option and terminates
		   upon attempting to access a restricted input file
		   specified by --input

      check_s:	   Ensures that an uncaught segmentation fault occurs

      check_sc:	   Ensures that a segmentation fault occurs and is caught by lab0

      check_sci:   Ensures that the program causes and catches a segmentation
      		   fault before attempting to write the contents of a "good"
		   input file. Also ensures that the program exits before
		   generating a (caught) segmentation fault when a "bad" input
		   file is provided.

      check_scio:  same as check_sci except that make uses output_goodscio.txt
      		   and output_badscio.txt
	
    dist      generate the distrubution tarball using `tar`.

    clean     delete all files created by the Makefile, and return the directory
    	      to its freshly untared state.

backtrace.png:
  shows a segfault and associated stack-trace generated in gdb by executing
  lab0 (compiled with -g flag).

breakpoint.png:
  shows a breakpoint and variable inspection. The variable of inspection
  causes a segmentation fault by assigning a value to a NULL pointer.


Limitations:
  lab0 is confimred to work with regular files. Non-regular file was not tested.
  Further, lab0 is not implemenented in a way that attempts to account for the
  case when non-regular files (example a symlink or directory) is used
  as --input.

  lab0 is implemented to create file supplied to --output. It is not
  implemented to handled the case where a pre-existing regular file
  without write permissions is passed.


Research:
https://github.com/coreutils/gnulib/blob/master/lib/progname.c
	Used an abbridged version of set_program_name to get the name
	of the executable being used.

CLI argument processing
http://man7.org/linux/man-pages/man3/getopt.3.html
https://github.com/coreutils/coreutils/blob/master/src/rm.c

Error resources:
https://linux.die.net/man/3/strerror
https://linux.die.net/man/3/perror
http://man7.org/linux/man-pages/man3/errno.3.html

File Open, Read, Write
http://man7.org/linux/man-pages/man2/open.2.html
Used to answer questions while implementing write
Used to answer questions while implementing read

Handling segfault:
http://man7.org/linux/man-pages/man2/signal.2.html
https://www.gnu.org/software/libc/manual/html_node/Signal-Handling.html

Makefiles resources:
ftp://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_7.html#SEC72
https://www.oreilly.com/library/view/managing-projects-with/0596006101/ch11.html
https://www.gnu.org/software/make/manual/html_node/Errors.html#Errors
https://www.gnu.org/software/make/manual/make.html#Recipes

I/O redirection:
https://www.tldp.org/LDP/abs/html/io-redirection.html
http://man7.org/linux/man-pages/man2/dup.2.html

file:///Users/WhiteRabbit/Downloads/fd_juggling.html

gdb:
CS33 smashinglab.txt 
