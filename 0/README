NAME: Richard Khillah
EMAIL: RKhillah@ucla.edu
ID: 604853262

This project uses basic POSIX file operations (like open(2), creat(2), etc...),
processes command line arguments, catchs (and handles) run-time exceptions,
returns informative exit statuses.

included files:
  lab0.c:
    Source file to build executable lab0 that copies STDIN to STDOUT. lab0, once
    built (using `make`, see Makefile), performs user specified I/O redirection,
    catches (and can cause) segmentation faults. It supports 4 commandline
    options:
    --input=filname	use the specified file as standard input (making it the
    			new fd0). If lab0 is unable to open the specified input
			file, the failure is reported to stderr and lab0
			exit(2)s with a return code of 2.

    --output=filename	create the specified file as standard output (making it the
    			new fd1). If the specified file is unable to be created,
			the failure is reported to stderr and lab0 exit(2)s with 
			a return code of 3.

    --segfault		force a segmentation fault. If this argument is specified,
    			any file redirection specified (using '--input' '--output'
			options) are performed immediately followed by a segfault.
			
    --catch		registers a SIGSEGV handler that catches a segmentation
    			segmentation fault. If '--catch' is used without 
			'--segfault', manual temination of the program is necessary
			as lab0.c does not incorpate trap(1).

  Makefile:
    Build the program 'lab0' and the distribution tarball. Makefil supports 
    the following `make` commands:
++++++++    
    all	      build the executable 'lab0'. To build 

    check     runs a quick smoke-test on whether or not the program seems to work,
    	      supports the required arguments, and reports success or failure.
	      The smoke-tests run are:
    	1
	2
	3
	
    dist      generate the distrubution tarball using `tar`.

    clean     delete all files created by the Makefile, and return the directory
    	      to its freshly untared state.

backtrace.png:
  shows a segfault and associated stack-trace.

breakpoint.png:
  shows a breakpoint and variable inspection


Limitations:



Research:
https://github.com/coreutils/gnulib/blob/master/lib/progname.c
	Used an abbridged version of set_program_name to get the name
	of the executable being used.

CLI argument processing
http://man7.org/linux/man-pages/man3/getopt.3.html
https://github.com/coreutils/coreutils/blob/master/src/rm.c

Error resources:
https://linux.die.net/man/3/strerror
https://linux.die.net/man/3/perror
http://man7.org/linux/man-pages/man3/errno.3.html

File Open, Read, Write
http://man7.org/linux/man-pages/man2/open.2.html
Used to answer questions while implementing write
Used to answer questions while implementing read

Handling segfault:
http://man7.org/linux/man-pages/man2/signal.2.html
https://www.gnu.org/software/libc/manual/html_node/Signal-Handling.html

Makefiles resources:
ftp://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_7.html#SEC72
https://www.oreilly.com/library/view/managing-projects-with/0596006101/ch11.html
https://www.gnu.org/software/make/manual/html_node/Errors.html#Errors
https://www.gnu.org/software/make/manual/make.html#Recipes

I/O redirection:
https://www.tldp.org/LDP/abs/html/io-redirection.html
http://man7.org/linux/man-pages/man2/dup.2.html

file:///Users/WhiteRabbit/Downloads/fd_juggling.html

gdb:
CS33 smashinglab.txt 
